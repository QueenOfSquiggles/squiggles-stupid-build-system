#include "cmake.hpp"

bool CMakeGenerator::generate_cmake_config(std::string configuration, std::vector<std::string> flags)
{
	Config config(configuration);
	write_cmake(config);
	return true;
}

void CMakeGenerator::write_cmake(Config config)
{

	// Reference
	// - https://cmake.org/getting-started/
	// - https://cmake.org/cmake/help/latest/guide/tutorial/Adding%20a%20Library.html
	// - https://www.baeldung.com/linux/cmake-cross-platform-compilation

	auto file_path = std::filesystem::current_path();
	file_path.append("CMakeLists.txt");
	std::ofstream file(file_path);
	if (!file.is_open())
	{
		std::cerr << "Failed to write to CMake file: " << file_path << std::endl;
		return;
	}
	// header
	file << "# Generated by SSBS" << std::endl
		 << std::endl
		 << std::endl
		 << "cmake_minimum_required (VERSION 3.22.1)"
		 << std::endl;
	// project specification
	auto bin = config.bin;
	auto project = bin;
	std::transform(bin.begin(), bin.end(), project.begin(), toupper);
	// modern C++ has transform and lambdas but no `string:to_upper` method???

	file
		<< "project (" << project << ")" << std::endl
		<< std::endl;

	// executable
	file
		<< "# Executable" << std::endl
		<< "add_executable(" << bin;
	for (auto source : config.source_files)
	{
		if (source.type == SourceType::C_SOURCE || source.type == SourceType::CPP_SOURCE)
		{
			auto rel_path = std::filesystem::relative(source.filepath);
			file << " " << rel_path.string();
		}
	}

	file << ")" << std::endl
		 << std::endl
		 << std::endl;

	// includes
	file << "# Includes" << std::endl;
	for (auto incl : config.include_dirs)
	{
		file << "target_include_directories(" << config.bin << " PUBLIC " << incl << ")" << std::endl;
	}

	// libraries
	file << "# Libraries" << std::endl;
	for (auto lib : config.libraries)
	{
		file << "target_link_libraries(" << config.bin << " " << lib.name << ")" << std::endl;
	}

	// install option
	file << "# Installation" << std::endl
		 << "install(TARGETS " << bin << ")";
	file.close();
}